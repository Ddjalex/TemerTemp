<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .temer-green { background-color: #7CB342; }
        .temer-green-light { background-color: #9CCC65; }
        .temer-blue { background-color: #1976D2; }
        .temer-blue-light { background-color: #42A5F5; }
        .text-temer-green { color: #7CB342; }
        .text-temer-blue { color: #1976D2; }
        .bg-temer-green { background-color: #7CB342; }
        .bg-temer-blue { background-color: #1976D2; }
        .border-temer-green { border-color: #7CB342; }
        .border-temer-blue { border-color: #1976D2; }
    </style>
</head>
<body class="bg-gray-50">
    <% if (typeof user !== 'undefined' && user) { %>
        <!-- Admin Navigation -->
        <nav class="bg-white shadow-lg border-b-2 border-temer-green">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16">
                    <!-- Left: Logo and Navigation -->
                    <div class="flex items-center space-x-8">
                        <div class="flex-shrink-0 flex items-center">
                            <i class="fas fa-building text-temer-green text-2xl mr-2"></i>
                            <span class="text-xl font-bold text-gray-900">Temer Properties</span>
                        </div>
                        <div class="hidden md:flex items-center space-x-1">
                            <% if (typeof pageTitle !== 'undefined') { %>
                                <span class="text-gray-500">/</span>
                                <span class="text-gray-900 font-medium"><%= pageTitle %></span>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- Right: User Menu -->
                    <div class="flex items-center space-x-4">
                        <!-- Dark mode toggle -->
                        <button id="darkModeToggle" class="p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100">
                            <i class="fas fa-moon"></i>
                        </button>
                        
                        <!-- User Menu Dropdown -->
                        <div class="relative" x-data="{ open: false }">
                            <button @click="open = !open" class="flex items-center space-x-3 text-gray-700 hover:text-gray-900 focus:outline-none">
                                <div class="w-8 h-8 bg-temer-green rounded-full flex items-center justify-center">
                                    <span class="text-white font-semibold text-sm">
                                        <%= user.fullName.split(' ').map(n => n[0]).join('') %>
                                    </span>
                                </div>
                                <span class="hidden md:block font-medium"><%= user.fullName %></span>
                                <i class="fas fa-chevron-down text-xs"></i>
                            </button>
                            
                            <!-- Dropdown Menu -->
                            <div x-show="open" @click.away="open = false" x-transition class="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-50">
                                <a href="/admin/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                    <i class="fas fa-user mr-2"></i> Profile
                                </a>
                                <a href="/admin/settings/password" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                    <i class="fas fa-key mr-2"></i> Change Password
                                </a>
                                <hr class="my-1">
                                <a href="/admin/logout" class="block px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                                    <i class="fas fa-sign-out-alt mr-2"></i> Logout
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    <% } %>
    
    <!-- Main Content -->
    <main class="<%= typeof user !== 'undefined' && user ? 'py-6' : '' %>">
        <%- body %>
    </main>
    
    <!-- Alpine.js for interactive components -->
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    
    <!-- Toast notifications -->
    <div id="toast-container" class="fixed top-4 right-4 z-50"></div>
    
    <script>
        // Dark mode toggle (basic implementation)
        document.getElementById('darkModeToggle')?.addEventListener('click', function() {
            document.documentElement.classList.toggle('dark');
            const isDark = document.documentElement.classList.contains('dark');
            localStorage.setItem('darkMode', isDark);
            this.querySelector('i').className = isDark ? 'fas fa-sun' : 'fas fa-moon';
        });
        
        // Load dark mode preference
        if (localStorage.getItem('darkMode') === 'true') {
            document.documentElement.classList.add('dark');
            document.getElementById('darkModeToggle')?.querySelector('i').className = 'fas fa-sun';
        }
        
        // Toast notification function
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `px-6 py-4 mb-4 rounded-xl shadow-lg text-white transform transition-all duration-300 translate-x-full ${
                type === 'success' ? 'bg-green-500' : 
                type === 'error' ? 'bg-red-500' : 
                type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
            }`;
            toast.innerHTML = `
                <div class="flex items-center">
                    <i class="fas ${
                        type === 'success' ? 'fa-check-circle' : 
                        type === 'error' ? 'fa-exclamation-circle' : 
                        type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle'
                    } mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            
            const container = document.getElementById('toast-container');
            container.appendChild(toast);
            
            // Animate in
            setTimeout(() => toast.classList.remove('translate-x-full'), 100);
            
            // Remove after 5 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => container.removeChild(toast), 300);
            }, 5000);
        }
        
        // Global error handler for forms
        window.handleFormError = function(form, errors) {
            // Clear previous errors
            form.querySelectorAll('.text-red-500').forEach(el => el.remove());
            form.querySelectorAll('.border-red-500').forEach(el => el.classList.remove('border-red-500'));
            
            // Show new errors
            Object.keys(errors).forEach(field => {
                const input = form.querySelector(`[name="${field}"]`);
                if (input) {
                    input.classList.add('border-red-500');
                    const error = document.createElement('p');
                    error.className = 'text-red-500 text-sm mt-1';
                    error.textContent = errors[field];
                    input.parentNode.appendChild(error);
                }
            });
        };
        
        // Global admin delete function
        window.confirmDelete = async function(type, id, title) {
            const endpoint = type === 'property' ? 'properties' : 
                           type === 'blog' ? 'blog' : 
                           type === 'hero' ? 'hero' : 
                           type === 'team' ? 'team' : type;
            
            if (confirm(`Are you sure you want to delete "${title}"? This action cannot be undone.`)) {
                try {
                    const response = await fetch(`/admin/${endpoint}/delete/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        showToast('Item deleted successfully', 'success');
                        location.reload();
                    } else {
                        showToast(data.message || 'Failed to delete item', 'error');
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    showToast('Failed to delete item', 'error');
                }
            }
        };
    </script>
</body>
</html>