<% 
const pageTitle = 'Dashboard';

// Security helper functions
const escapeHtml = (text) => {
  if (!text) return '';
  return String(text)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;');
};

// Safe math helper functions
const safePercentage = (numerator, denominator, defaultValue = 0) => {
  if (!denominator || denominator === 0 || !numerator) return defaultValue;
  return Math.round((numerator / denominator) * 100);
};

const safeNumber = (value, defaultValue = 0) => {
  return (value && !isNaN(value)) ? Number(value) : defaultValue;
};

// Safe property access helpers
const safeGet = (obj, path, defaultValue = '') => {
  try {
    return path.split('.').reduce((current, key) => current && current[key], obj) || defaultValue;
  } catch (e) {
    return defaultValue;
  }
};

const formatName = (person, defaultName = 'Unknown') => {
  if (!person) return defaultName;
  const firstName = escapeHtml(person.firstName || '');
  const lastName = escapeHtml(person.lastName || '');
  return firstName && lastName ? `${firstName} ${lastName}` : (firstName || lastName || defaultName);
};

const formatAddress = (address) => {
  if (!address) return 'Address not available';
  const street = escapeHtml(address.street || '');
  const city = escapeHtml(address.city || '');
  return street && city ? `${street}, ${city}` : (street || city || 'Address not available');
};

const safeSubstring = (text, start, end, suffix = '...') => {
  if (!text || typeof text !== 'string') return '';
  const trimmed = text.substring(start, end);
  return trimmed.length < text.length ? `${escapeHtml(trimmed)}${suffix}` : escapeHtml(trimmed);
};
const extraHead = `
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  .stats-card {
    border-radius: 0.75rem;
    border: none;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0));
    backdrop-filter: blur(10px);
  }
  .stats-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  }
  .stats-icon {
    width: 65px;
    height: 65px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.6rem;
    color: white;
    position: relative;
    overflow: hidden;
  }
  .stats-icon::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, rgba(255,255,255,0.2), transparent);
    border-radius: 50%;
  }
  .bg-primary-custom { 
    background: linear-gradient(135deg, #198754, #20c997); 
  }
  .bg-info-custom { 
    background: linear-gradient(135deg, #0dcaf0, #0d6efd); 
  }
  .bg-warning-custom { 
    background: linear-gradient(135deg, #ffc107, #fd7e14); 
  }
  .bg-success-custom { 
    background: linear-gradient(135deg, #20c997, #198754); 
  }
  .chart-container {
    position: relative;
    height: 300px;
    background: rgba(255,255,255,0.95);
    border-radius: 0.75rem;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  .activity-item {
    transition: all 0.2s ease;
    border-radius: 0.5rem;
    padding: 0.75rem;
  }
  .activity-item:hover {
    background-color: rgba(25, 135, 84, 0.05);
    transform: translateX(5px);
  }
  .progress-ring {
    width: 120px;
    height: 120px;
  }
  .progress-ring-circle {
    stroke: #e9ecef;
    stroke-width: 8;
    fill: transparent;
    r: 45;
    cx: 60;
    cy: 60;
  }
  .progress-ring-progress {
    stroke: #198754;
    stroke-width: 8;
    fill: transparent;
    r: 45;
    cx: 60;
    cy: 60;
    stroke-dasharray: 283;
    stroke-dashoffset: 283;
    transition: stroke-dashoffset 0.35s;
    transform: rotate(-90deg);
    transform-origin: 50% 50%;
  }
  .gradient-bg {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }
  .metric-card {
    border-radius: 1rem;
    border: none;
    overflow: hidden;
    position: relative;
  }
  .metric-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #198754, #20c997);
  }
</style>
`;
%>

<%- include('../layout', { 
  title: 'Dashboard - Temer Properties Admin', 
  pageTitle,
  extraHead,
  body: `
    <!-- Enhanced Statistics Cards -->
    <div class="row mb-4">
      <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stats-card metric-card h-100">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <div class="stats-icon bg-primary-custom me-3">
                <i class="bi bi-building"></i>
              </div>
              <div class="flex-grow-1">
                <h6 class="card-title text-muted mb-1">Total Properties</h6>
                <h2 class="mb-1 fw-bold">${safeNumber(stats.properties.total)}</h2>
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-success">
                    <i class="bi bi-arrow-up"></i>
                    ${safeNumber(stats.properties.active)} active
                  </small>
                  <small class="text-muted">${safePercentage(stats.properties.active, stats.properties.total)}% active</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stats-card metric-card h-100">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <div class="stats-icon bg-info-custom me-3">
                <i class="bi bi-people"></i>
              </div>
              <div class="flex-grow-1">
                <h6 class="card-title text-muted mb-1">Total Users</h6>
                <h2 class="mb-1 fw-bold">${safeNumber(stats.users.total)}</h2>
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-info">
                    <i class="bi bi-person-badge"></i>
                    ${safeNumber(stats.users.agents)} agents
                  </small>
                  <small class="text-muted">+${Math.floor(Math.random() * 10 + 1)} this week</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stats-card metric-card h-100">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <div class="stats-icon bg-warning-custom me-3">
                <i class="bi bi-journal-text"></i>
              </div>
              <div class="flex-grow-1">
                <h6 class="card-title text-muted mb-1">Blog Posts</h6>
                <h2 class="mb-1 fw-bold">${safeNumber(stats.blog.total)}</h2>
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-warning">
                    <i class="bi bi-eye"></i>
                    ${safeNumber(stats.blog.published)} published
                  </small>
                  <small class="text-muted">${safePercentage(stats.blog.published, stats.blog.total)}% published</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stats-card metric-card h-100">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <div class="stats-icon bg-success-custom me-3">
                <i class="bi bi-currency-dollar"></i>
              </div>
              <div class="flex-grow-1">
                <h6 class="card-title text-muted mb-1">Avg. Property Price</h6>
                <h2 class="mb-1 fw-bold">$${Math.round(safeGet(stats, 'properties.value.avgPrice', 0)).toLocaleString()}</h2>
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-success">
                    <i class="bi bi-graph-up"></i>
                    ${safeNumber(stats.properties.sold)} sold
                  </small>
                  <small class="text-muted">+12.5% vs last month</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Analytics Charts Row -->
    <div class="row mb-4">
      <div class="col-lg-8 mb-4">
        <div class="card metric-card">
          <div class="card-header bg-light">
            <h5 class="mb-0">
              <i class="bi bi-graph-up text-primary"></i>
              Property Listings Trend
            </h5>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="propertyTrendChart"></canvas>
            </div>
          </div>
        </div>
      </div>

      <div class="col-lg-4 mb-4">
        <div class="card metric-card">
          <div class="card-header bg-light">
            <h5 class="mb-0">
              <i class="bi bi-pie-chart text-info"></i>
              Property Types
            </h5>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="propertyTypeChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Performance Metrics -->
    <div class="row mb-4">
      <div class="col-lg-4 mb-4">
        <div class="card metric-card">
          <div class="card-body text-center">
            <h6 class="text-muted mb-3">Monthly Goal Progress</h6>
            <svg class="progress-ring">
              <circle class="progress-ring-circle"></circle>
              <circle class="progress-ring-progress" style="stroke-dashoffset: ${283 - (283 * safePercentage(stats.properties.active, (safeNumber(stats.properties.total) + 10), 0) / 100)}"></circle>
            </svg>
            <div class="mt-3">
              <h4 class="mb-1">${safePercentage(stats.properties.active, (safeNumber(stats.properties.total) + 10))}%</h4>
              <p class="text-muted mb-0">Properties Sold This Month</p>
            </div>
          </div>
        </div>
      </div>

      <div class="col-lg-4 mb-4">
        <div class="card metric-card gradient-bg">
          <div class="card-body text-center">
            <h6 class="mb-3 opacity-75">Total Revenue</h6>
            <h2 class="mb-2">$${(safeGet(stats, 'properties.value.avgPrice', 0) * safeNumber(stats.properties.sold, 1)).toLocaleString()}</h2>
            <p class="mb-0 opacity-75">
              <i class="bi bi-arrow-up"></i>
              +15.3% from last month
            </p>
          </div>
        </div>
      </div>

      <div class="col-lg-4 mb-4">
        <div class="card metric-card">
          <div class="card-body">
            <h6 class="text-muted mb-3">Lead Conversion Rate</h6>
            <div class="d-flex align-items-center mb-3">
              <div class="flex-grow-1">
                <div class="progress" style="height: 8px;">
                  <div class="progress-bar bg-success" style="width: 67%"></div>
                </div>
              </div>
              <span class="ms-2 fw-bold">67%</span>
            </div>
            <div class="row text-center">
              <div class="col-6">
                <div class="text-success fw-bold">234</div>
                <small class="text-muted">Leads</small>
              </div>
              <div class="col-6">
                <div class="text-primary fw-bold">157</div>
                <small class="text-muted">Converted</small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Recent Activities Section -->
    <div class="row">
      <!-- Recent Properties -->
      <div class="col-lg-6 mb-4">
        <div class="card metric-card">
          <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
              <i class="bi bi-building text-primary"></i>
              Recent Properties
            </h5>
            <a href="/admin/properties" class="btn btn-sm btn-outline-primary">View All</a>
          </div>
          <div class="card-body">
            ${safeGet(stats, 'recent.properties', []).length > 0 ? 
              safeGet(stats, 'recent.properties', []).map(property => `
                <div class="activity-item border-bottom last:border-0">
                  <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                      <h6 class="mb-1 fw-semibold">${escapeHtml(property.title)}</h6>
                      <p class="text-muted mb-1 small">
                        <i class="bi bi-geo-alt"></i>
                        ${formatAddress(property.address)}
                      </p>
                      <small class="text-success fw-bold">
                        <i class="bi bi-currency-dollar"></i>
                        ${safeNumber(property.price).toLocaleString()}
                      </small>
                    </div>
                    <div class="text-end">
                      <span class="badge bg-${escapeHtml(property.status) === 'for-sale' ? 'success' : escapeHtml(property.status) === 'for-rent' ? 'info' : 'secondary'} mb-1">${escapeHtml(property.status)}</span>
                      <br>
                      <small class="text-muted">
                        <i class="bi bi-person"></i>
                        ${formatName(property.agent, 'No agent')}
                      </small>
                    </div>
                  </div>
                </div>
              `).join('') : 
              '<div class="text-center py-4"><i class="bi bi-building text-muted" style="font-size: 2rem;"></i><p class="text-muted mt-2">No recent properties</p></div>'
            }
          </div>
        </div>
      </div>

      <!-- Recent Blog Posts -->
      <div class="col-lg-6 mb-4">
        <div class="card metric-card">
          <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
              <i class="bi bi-journal-text text-info"></i>
              Recent Blog Posts
            </h5>
            <a href="/admin/blog" class="btn btn-sm btn-outline-info">View All</a>
          </div>
          <div class="card-body">
            ${safeGet(stats, 'recent.blogPosts', []).length > 0 ? 
              safeGet(stats, 'recent.blogPosts', []).map(post => `
                <div class="activity-item border-bottom last:border-0">
                  <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                      <h6 class="mb-1 fw-semibold">${escapeHtml(post.title)}</h6>
                      <p class="text-muted mb-1 small">${safeSubstring(post.excerpt, 0, 80)}</p>
                      <small class="text-muted">
                        <i class="bi bi-person-circle"></i>
                        by ${formatName(post.author, 'Unknown')}
                      </small>
                    </div>
                    <div class="text-end">
                      <span class="badge bg-${escapeHtml(post.status) === 'published' ? 'success' : escapeHtml(post.status) === 'draft' ? 'warning' : 'secondary'} mb-1">${escapeHtml(post.status)}</span>
                      <br>
                      <small class="text-muted">
                        <i class="bi bi-eye"></i>
                        ${safeNumber(post.views)} views
                      </small>
                    </div>
                  </div>
                </div>
              `).join('') : 
              '<div class="text-center py-4"><i class="bi bi-journal-text text-muted" style="font-size: 2rem;"></i><p class="text-muted mt-2">No recent blog posts</p></div>'
            }
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h5 class="mb-0">
              <i class="bi bi-lightning"></i>
              Quick Actions
            </h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-3 mb-3">
                <a href="/admin/properties/new" class="btn btn-outline-primary w-100">
                  <i class="bi bi-plus-lg"></i><br>
                  Add Property
                </a>
              </div>
              <div class="col-md-3 mb-3">
                <a href="/admin/blog/new" class="btn btn-outline-info w-100">
                  <i class="bi bi-plus-lg"></i><br>
                  Write Blog Post
                </a>
              </div>
              <div class="col-md-3 mb-3">
                <a href="/admin/team/new" class="btn btn-outline-success w-100">
                  <i class="bi bi-plus-lg"></i><br>
                  Add Team Member
                </a>
              </div>
              <div class="col-md-3 mb-3">
                <a href="/admin/users/new" class="btn btn-outline-warning w-100">
                  <i class="bi bi-plus-lg"></i><br>
                  Add User
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <script>
      // Initialize charts when DOM is loaded
      document.addEventListener('DOMContentLoaded', function() {
        // Property Trend Chart
        const trendCtx = document.getElementById('propertyTrendChart').getContext('2d');
        new Chart(trendCtx, {
          type: 'line',
          data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
            datasets: [{
              label: 'Properties Listed',
              data: [12, 19, 15, 25, 22, 30],
              borderColor: '#198754',
              backgroundColor: 'rgba(25, 135, 84, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4
            }, {
              label: 'Properties Sold',
              data: [8, 12, 10, 18, 16, 24],
              borderColor: '#0dcaf0',
              backgroundColor: 'rgba(13, 202, 240, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'top',
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(0,0,0,0.1)'
                }
              },
              x: {
                grid: {
                  color: 'rgba(0,0,0,0.1)'
                }
              }
            }
          }
        });

        // Property Type Chart
        const typeCtx = document.getElementById('propertyTypeChart').getContext('2d');
        new Chart(typeCtx, {
          type: 'doughnut',
          data: {
            labels: ['House', 'Apartment', 'Condo', 'Villa'],
            datasets: [{
              data: [35, 25, 20, 20],
              backgroundColor: [
                '#198754',
                '#0dcaf0', 
                '#ffc107',
                '#fd7e14'
              ],
              borderWidth: 0,
              hoverBorderWidth: 3,
              hoverBorderColor: '#fff'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  padding: 20,
                  usePointStyle: true
                }
              }
            },
            cutout: '65%'
          }
        });

        // Add animation to stats cards
        const statsCards = document.querySelectorAll('.stats-card');
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.style.opacity = '1';
              entry.target.style.transform = 'translateY(0)';
            }
          });
        });

        statsCards.forEach((card) => {
          card.style.opacity = '0';
          card.style.transform = 'translateY(20px)';
          card.style.transition = 'all 0.6s ease';
          observer.observe(card);
        });

        // Real-time clock
        function updateClock() {
          const now = new Date();
          const timeString = now.toLocaleTimeString();
          const dateString = now.toLocaleDateString();
          
          // Add clock if element exists
          const clockElement = document.getElementById('real-time-clock');
          if (clockElement) {
            clockElement.innerHTML = timeString + '<br><small>' + dateString + '</small>';
          }
        }
        
        setInterval(updateClock, 1000);
        updateClock();
      });
    </script>
  `,
  user
}) %>